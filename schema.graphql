type Account @entity {
  "Account address"
  id: ID!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")
}

type HistoricalBalance @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  date: DateTime!
}

type Era @entity {
  immortalEra: String!
}

type NeuronRegisteredArgs @entity {
  name: String!
  type: String!
  value: String!
}

type NeuronRegistered @entity {
  id: ID!
  name: String!
  method: String!
  section: String!
  versionInfo: String!
  blockNumber: BigInt!
  blockHash: String!
  immunityPeriod: String!
  args: NeuronRegisteredArgs!

}

# The schema allows the following query:
# {
#   id: event.id,
#   name: event.name,
#   method: event.method,
#   section: event.section,
#   versionInfo: event.versionInfo,
#   indexInBlock: event.indexInBlock,
#   blockNumber: event.blockNumber,
#   blockHash: event.blockHash,
#   extrinsic: {
#     id: event.extrinsic.id,
#     name: event.extrinsic.name,
#     method: event.extrinsic.method,
#     section: event.extrinsic.section,
#     versionInfo: event.extrinsic.versionInfo,
#     era: {
#       immortalEra: event.extrinsic.era.immortalEra,
#     },
#     signer: event.extrinsic.signer,
#     args: {
#       name: event.extrinsic.args.name,
#       type: event.extrinsic.args.type,
#       value: event.extrinsic.args.value,
#     },
#     hash: event.extrinsic.hash,
#     indexInBlock: event.extrinsic.indexInBlock,
#   }
# }

# type NeuronRegisteredExtrinsic @entity {
#   id: ID!
#   name: String!
#   method: String!
#   section: String!
#   versionInfo: String
#   era: Era
#   signer: String
#   args: NeuronRegisteredArgs
#   hash: String
#   indexInBlock: BigInt
# }

# type NeuronRegistered @entity {
#   id: ID!
#   name: String!
#   method: String!
#   section: String!
#   versionInfo: String
#   blockNumber: BigInt!
#   blockHash: String
#   extrinsic: Object!
# }

# type Neuron @entity {
#   "Neuron address"
#   id: ID!
#   version: String!
#   ip: String!
#   port: BigInt!
#   ipType: BigInt!
#   uid: BigInt!
#   modality: BigInt!
#   hotkey: String!
#   coldkey: String!
#   active: BigInt!
#   lastUpdate: BigInt!
#   priority: BigInt!
#   stake: Float!
#   rank: Float!
#   trust: Float!
#   consensus: Float!
#   incentive: Float!
#   dividends: Float!
#   emission: Float!
#   bonds: [Float]!
#   weights: [Float]!
# }


